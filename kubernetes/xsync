#!/usr/bin/bash
# HEADER
#================================================================
#% SYNOPSIS
#%    ${prog}  file1
#%
#% DESCRIPTION
#%    xsync
#%
#% ARGUMENTS
#%     file1 file2 file3
#%
#% EXAMPLES
#%    ${prog} file1
#%
#================================================================
#  HISTORY
#     20220104  innod motingxia@163.com
#================================================================
#  NOTES
#================================================================
# END_OF_HEADER
#================================================================

#================================================================
#  IMPORT COMMON FUNCTIONS AND VARIABLES
#================================================================
RUNDIR="$(cd "$(dirname "${0}")" && pwd)"
if [ -z "${FUNCTIONS_IMPORTED}" ]; then
  . ${RUNDIR}/functions.ksh
fi

#================================================================
#  FUNCTIONS
#================================================================
do_exit() {
  RC=$1
  echo "$RC" >/tmp/RC.$$
  exit $RC
}

if [ $# -lt 1 ]
then
  usage
  exit 8;
fi

. ${RUNDIR}/master-slave.sh
RC=0

starttime=$(date +%s)
scriptname=$(basename $0)
if ! [ -f ${LOG_FILE_DIR}/${APPNAME}${scriptname}.log  ];then
  touch ${LOG_FILE_DIR}/${APPNAME}${scriptname}.log
  LogFile=${LOG_FILE_DIR}/${APPNAME}${scriptname}.log
else
  rm -rf ${LOG_FILE_DIR}/${APPNAME}${scriptname}.log
  touch ${LOG_FILE_DIR}/${APPNAME}${scriptname}.log
  LogFile=${LOG_FILE_DIR}/${APPNAME}${scriptname}.log
fi
LogFile=${LOG_FILE_DIR}/${APPNAME}${scriptname}.log
echo ${LogFile}

#================================================================
#     main
#================================================================
do_filecopy()
{
    targethost=$1
    targetfile=$2
    #5. 获取父目录
    pdir=$(cd -P $(dirname $targetfile); pwd)
    # 6. 获取当前文件的名称
    fname=$(basename $targetfile)
    if is_reachable ${targethost}; then
        log_info "====================  ${targethost}  =
        log_info "  copy $(hostname):${pdir}/${fna
        ssh ${targethost}  "mkdir -p $pdir"
        rsync -avz $pdir/$fname ${targethost}:$pdir
        if [ $? -eq 0 ];then
            log_info "  copy $(hostname):${pdir}/$
        else
            do_exit 8
        fi
    else
        log_error "  Target ${targethost} not exist"
        do_exit 8
    fi
}

do_sync()
{
    host=$1
    targetfile=$2

    # 3. 遍历所有目录，挨个发送
    for file in $@
    do
        #4 判断文件是否存在
        if [ -e $targetfile ]; then
            #5. 获取父目录
            pdir=$(cd -P $(dirname $targetfile); pwd)
            # 6. 获取当前文件的名称
            fname=$(basename $targetfile)
            if is_reachable ${host}; then
                log_info "====================  ${host}  ===================="
                log_info "  copy $(hostname):${pdir}/${fname} to ${host}:$pdir/${fname}"
                ssh ${host}  "mkdir -p $pdir"
                rsync -avz $pdir/$fname ${host}:$pdir
                if [ $? -eq 0 ];then
                    log_info "  copy $(hostname):${pdir}/${fname} to ${host}:$pdir/${fname} done"
                else
                    do_exit 8
                fi
            else
                log_error "  Target ${host} not exist"
                do_exit 8
            fi
        elif  [ -d $targetfile ]; then
            if is_reachable ${host}; then
                log_info "====================  ${host}  ===================="
                log_info "  copy $(hostname):${targetfile} to ${host}:${targetfile}"
                ssh ${host}  "mkdir -p ${file}"
                rsync -avz ${file} ${host}:${file}
                if [ $? -eq 0 ];then
                    log_info "  copy $(hostname):${targetfile} to ${host}:${targetfile} done"
                else
                    do_exit 8
                fi
            else
                log_error "  Target ${host} not exist"
                do_exit 8
            fi
        else
            if test -z $file ; then
                break
            else
                log_info "  $file does not exists!"
                do_exit 8
            fi
        fi
    done
}

#================================================================
#     main
#================================================================

{
#2. 遍历集群所有机器
tmpfile=$$.fifo   # 创建管道名称
mkfifo $tmpfile   # 创建管道
exec 6<>$tmpfile  # 创建文件标示4，以读写方式操作管道$tmpfile
rm $tmpfile       # 将创建的管道文件清除
thred=${#NODE_NAMES[@]}
	
# 为并发线程创建相应个数的占位
for (( i = 1;i<=${thred};i++ ));do echo;done >&6 # 将占位信息写入管道

file2=$@
Count=0
for host in `seq 0 ${#NODE_NAMES[@]}`
    do
        if test -z ${NODE_NAMES[$host]} ; then
            break
        else
            read -u6
            let Count+=1
            {
                log_info "  Parallel copy $Count"
                do_sync ${NODE_NAMES[$host]} ${file2}
                echo >&6
            } &
        fi
    done 
    wait
    exec 6>&-   # 关闭管道
} 2>&1 | tee -a $LogFile

if [ -f /tmp/RC.$$ ]; then
   RC=$(cat /tmp/RC.$$)
   rm -f /tmp/RC.$$
fi
if [ "$RC" == "0" ]; then
  log_info   "  OK: EndofScript ${scriptname} "    | tee -a $LogFile
else
  log_error  "  ERROR: EndofScript ${scriptname} " | tee -a $LogFile
fi

ende=$(date +%s)
diff=$((ende - starttime))
log_info     "  $(date)   Runtime      :   $diff"  | tee -a $LogFile
log_info     "  Save log to ${LogFile}         "   | tee -a $LogFile
logrename  ${LogFile}
exit ${RC}